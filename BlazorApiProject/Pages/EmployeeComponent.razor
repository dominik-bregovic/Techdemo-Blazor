@page "/employee"
@page "/employee/{id:int}"
@using MyModels.Models
@using BlazorApiProject.Services;
@using BlazorApiProject.Services.EmployeeServices;
@inject  IEmployeeService empService;

@if (Id == null)
{
	<PageTitle>Create a new Superhero</PageTitle>
	<h3>Create new Employee</h3>
}
else
{
	<PageTitle>Edit Employee: @emp.Name</PageTitle>
	<h3>Edit Employee:</h3>
}


<!-- Blazor build in Editform, needs a Model-->
<EditForm Model="emp" OnSubmit="HandleSubmit">
	<div>
		<label for="id">Employee ID:</label>
		<InputText id="id" @bind-Value="@EmpIdAsText" class="form-control"></InputText>
	</div>
	<div>
		<label for="Name">Employee Name:</label>
		<InputText Name="Name" @bind-Value="@emp.Name" class="form-control"></InputText>
	</div>
	<br>

	<button type="submit" class="btn btn-primary" >@btnText</button>

</EditForm>


@code {
	[Parameter]
	public int? Id { get; set; }

	Employee emp = new Employee();
	string btnText = string.Empty;
	string EmpIdAsText = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		if (Id == null)
		{
			//emp = new Employee(0, "Default"); have to create a new hero
			//emp = new Employee {EmpId = 0, Name = "Error" };
			btnText = "Save new Hero";
		}
		else
		{
			emp = await empService.GetSingelEmployee((int)Id);
			btnText = "Update Hero";
			EmpIdAsText = emp.EmpId.ToString();
		}
	}



	async Task HandleSubmit()
	{
		Employee e = new Employee {EmpId =  int.Parse(EmpIdAsText), Name = emp.Name};
		await empService.UpdateEmployee(emp.EmpId, e);
		emp = await empService.GetSingelEmployee((int)Id);
	}


}
